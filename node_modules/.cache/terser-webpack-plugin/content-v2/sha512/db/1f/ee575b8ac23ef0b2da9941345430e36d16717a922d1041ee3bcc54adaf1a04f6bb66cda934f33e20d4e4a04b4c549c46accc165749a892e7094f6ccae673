{"map":"{\"version\":3,\"sources\":[\"index.js\"],\"names\":[\"modules\",\"installedModules\",\"__webpack_require__\",\"moduleId\",\"exports\",\"module\",\"i\",\"l\",\"call\",\"m\",\"c\",\"d\",\"name\",\"getter\",\"o\",\"Object\",\"defineProperty\",\"enumerable\",\"get\",\"r\",\"Symbol\",\"toStringTag\",\"value\",\"t\",\"mode\",\"__esModule\",\"ns\",\"create\",\"key\",\"bind\",\"n\",\"object\",\"property\",\"prototype\",\"hasOwnProperty\",\"p\",\"s\",\"__webpack_exports__\",\"eval\"],\"mappings\":\"CAAS,SAAUA,GAET,IAAIC,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUC,QAGnC,IAAIC,EAASJ,EAAiBE,GAAY,CACzCG,EAAGH,EACHI,GAAG,EACHH,QAAS,IAUV,OANAJ,EAAQG,GAAUK,KAAKH,EAAOD,QAASC,EAAQA,EAAOD,QAASF,GAG/DG,EAAOE,GAAI,EAGJF,EAAOD,QAKfF,EAAoBO,EAAIT,EAGxBE,EAAoBQ,EAAIT,EAGxBC,EAAoBS,EAAI,SAASP,EAASQ,EAAMC,GAC3CX,EAAoBY,EAAEV,EAASQ,IAClCG,OAAOC,eAAeZ,EAASQ,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEX,EAAoBiB,EAAI,SAASf,GACX,oBAAXgB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAeZ,EAASgB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAeZ,EAAS,aAAc,CAAEkB,OAAO,KAQvDpB,EAAoBqB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQpB,EAAoBoB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFAzB,EAAoBiB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOpB,EAAoBS,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRxB,EAAoB4B,EAAI,SAASzB,GAChC,IAAIQ,EAASR,GAAUA,EAAOoB,WAC7B,WAAwB,OAAOpB,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAH,EAAoBS,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRX,EAAoBY,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG9B,EAAoBiC,EAAI,GAIjBjC,EAAoBA,EAAoBkC,EAAI,GAnFpD,CAsFC,CAEJ,SAAU/B,OAAQgC,oBAAqBnC,qBAE7C,aACAoC,KAAK\"}","code":"!function(n){var g={};function e(t){if(g[t])return g[t].exports;var I=g[t]={i:t,l:!1,exports:{}};return n[t].call(I.exports,I,I.exports,e),I.l=!0,I.exports}e.m=n,e.c=g,e.d=function(n,g,t){e.o(n,g)||Object.defineProperty(n,g,{enumerable:!0,get:t})},e.r=function(n){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(n,\"__esModule\",{value:!0})},e.t=function(n,g){if(1&g&&(n=e(n)),8&g)return n;if(4&g&&\"object\"==typeof n&&n&&n.__esModule)return n;var t=Object.create(null);if(e.r(t),Object.defineProperty(t,\"default\",{enumerable:!0,value:n}),2&g&&\"string\"!=typeof n)for(var I in n)e.d(t,I,function(g){return n[g]}.bind(null,I));return t},e.n=function(n){var g=n&&n.__esModule?function(){return n.default}:function(){return n};return e.d(g,\"a\",g),g},e.o=function(n,g){return Object.prototype.hasOwnProperty.call(n,g)},e.p=\"\",e(e.s=0)}([function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval(\"// ESM COMPAT FLAG\\n__webpack_require__.r(__webpack_exports__);\\n\\n// CONCATENATED MODULE: ./src/js/functions.js\\n// Rendering the element or removing it from the screen smoothly - with animations\\n// The element must have 3 CSS Classes available - hidden class, visible class, hiding class\\n// Hidden class - display: none, no animation\\n// Visible class - display: block (or whatever except none) and an animation of the element appearing on the page (sliding -in or so)\\n// Hiding class - animation of the element disappearing\\n// Element has only one of these classes at a time.\\n// The hiding class is changed to hidden class after 'animationend' event on the element\\nconst showOrHideEl = (element, hiddenClass, visibleClass, hidingClass) => {\\n    if([...element.classList].includes(hiddenClass)) {\\n\\n        element.classList.remove(hiddenClass);\\n        element.classList.add(visibleClass);\\n\\n    } else {\\n\\n        element.classList.remove(visibleClass);\\n        element.classList.add(hidingClass);\\n\\n        const animationEndHandler =  function(event) {\\n        if(event.pseudoElement) {\\n            element.addEventListener('animationend', animationEndHandler,  {\\n            capture: false,\\n            once: true,\\n            passive: false\\n            });\\n            return;\\n        }\\n\\n        element.classList.remove(hidingClass);\\n        element.classList.add(hiddenClass);\\n\\n        }\\n\\n        element.addEventListener('animationend', animationEndHandler, {\\n        capture: false,\\n        once: true,\\n        passive: false\\n        });\\n    }\\n}\\n\\n// Renders map to an element with id 'map'\\nfunction createMap(lng, lat) {\\n    \\n    const pos = {'lat': lat, 'lng': lng};\\n    \\n    const map = new google.maps.Map(document.getElementById('map'), {\\n      zoom: 12,\\n      center: pos\\n    });\\n    \\n    const marker = new google.maps.Marker({\\n      position: pos,\\n      map: map\\n    });\\n    \\n  } \\n\\n// Sends request to Google Geocoding API and returns coords for the sent address\\nconst getCoordsFromAddress = async (address) => {\\n\\n    // Encoding address for URL usage\\n    const urlAddress = encodeURI(address);\\n\\n    // Sending request\\n    const response = await fetch(`https://maps.googleapis.com/maps/api/geocode/json?address=${urlAddress},+Mountain+View,+CA&key=AIzaSyDmi1OHuKzeuT3xbKkcgBQ4C6FEC9CN6hE`);\\n    //Parsing\\n    const data = await response.json();\\n\\n    // Returning coords for the best result\\n    const coordinates = data.results[0].geometry.location;\\n\\n    if(!coordinates) {\\n        throw new Error('Getting the coords from google geocoding API failed');\\n    }\\n\\n    return coordinates;\\n}\\n\\n// Converting kilometers to deg (1 deg means cca 111km)\\nconst convertKmToDeg = kilometers => kilometers/111;\\n\\n// Switching input whenever the user chooses his preferable input option by adding and removing hidden classes\\nconst changeInputType = (firstInputSet, secondInputSet, checkfor , e) => {\\n\\n    if (e.target.value === checkfor) {\\n        firstInputSet.classList.remove('hidden');\\n        secondInputSet.classList.add('hidden');\\n       \\n    } else {\\n        firstInputSet.classList.add('hidden');\\n        secondInputSet.classList.remove('hidden');\\n    }\\n\\n}\\n\\n// Getting coordinates from the user input\\nconst getCoords = async (addressRadio, formEls) => {\\n\\n    let lng;\\n    let lat;\\n\\n    // If !adressRadio.checked = if the user has selected coords for getting address\\n    if(!addressRadio.checked) {\\n\\n        // Getiting coords from the coords input\\n        lng = +formEls['coord-long'].value;\\n        lat = +formEls['coord-lat'].value;\\n\\n    } else {\\n\\n        //Getting address from the address input \\n        const address = formEls['address'].value;\\n\\n        // Sending request to the Google Geocoding API and geting coords for the address\\n        try {\\n            const coords = await getCoordsFromAddress(address);\\n\\n            lng = coords.lng;\\n            lat = coords.lat;\\n\\n        } catch (err) {\\n\\n            throw new Error(err);\\n\\n        }\\n       \\n    }\\n\\n    return [lng, lat];\\n}\\n\\nconst calculateCoordTransform = (circleRadio, formEls, coords) => {\\n\\n    const [lat, lng] = coords;\\n\\n    let range;\\n    let randomDist;\\n\\n    // Selecting random angle\\n    const randomAngle  = Math.random() * 2 * Math.PI\\n\\n    //If circleRadio.checked = if the user has choosen the circle\\n    if(circleRadio.checked) {\\n\\n        // Selecting random distance from base in the selected circle range\\n        range = +formEls['circle-perimeter'].value;\\n        randomDist = range * Math.random();\\n        \\n    } else {\\n\\n        // Selecting random distance from base in the selected annulus range\\n        range = +formEls['annulus-perimeter-outer'].value - +formEls['annulus-perimeter-inner'].value;\\n        randomDist = +formEls['annulus-perimeter-inner'].value + range * Math.random();\\n\\n    }\\n\\n    // Getting the offset from base latitude and base longitude in kilometers\\n    const moveLngKm = Math.sin(randomAngle)*randomDist;\\n    const moveLatKm = Math.cos(randomAngle)*randomDist;\\n\\n    // Converting to degrees\\n    const moveLng = convertKmToDeg(moveLngKm);\\n    const moveLat = convertKmToDeg(moveLatKm);\\n\\n    // Applying the offset\\n    const finalLng = lng + moveLng;\\n    const finalLat = lat + moveLat;\\n\\n    return [finalLat, finalLng];\\n\\n}\\nconst validateInput = (input, formEls) => {\\n\\n    if(input.type === 'radio') {\\n        return;\\n    }\\n\\n    let valid;\\n\\n    if(input === formEls['address']) {\\n        valid = input.value.trim();\\n    } else {\\n        const numberRegex = /^[0-9]+(\\\\.[0-9])*$/;\\n        valid = numberRegex.test(input.value);\\n    }\\n\\n    if (valid) {\\n        input.classList.remove('invalid');\\n    } else {\\n        input.classList.add('invalid');\\n    }\\n\\n    return valid;\\n}\\nconst validateNeeded = (addressRadio, circleRadio, formEls) => {\\n\\n    let validateList = [];\\n\\n    if (addressRadio.checked) {\\n        validateList.push(formEls['address']);\\n    } else {\\n        validateList.push(formEls['coord-lng']);\\n        validateList.push(formEls['coord-lat']);\\n    }\\n\\n    if (circleRadio.checked) {\\n        validateList.push(formEls['circle-perimeter']);\\n    } else {\\n        validateList.push(formEls['annulus-perimeter-outer']);\\n        validateList.push(formEls['annulus-perimeter-inner']);\\n    }\\n\\n    let valid = true;\\n\\n    for (const input of validateList) {\\n        \\n        const isInputValid = validateInput(input, formEls);\\n\\n        if(!isInputValid) {\\n            valid = false;\\n        }\\n\\n    }\\n\\n    return valid;\\n}\\n// CONCATENATED MODULE: ./src/js/index.js\\n\\n\\nconst js_form = document.querySelector('form');\\n\\n////// IF THE CURRENT PAGE IS INDEX\\nif(js_form) {\\n\\n    // Accessing formEls \\n    const formEls = js_form.elements;\\n\\n    // Selecting address initially, getting adressRadio, which is then being used for getting input values\\n    const addressRadio = document.getElementById('locationselect-adr');\\n    addressRadio.checked = true;\\n\\n    // Selecting circle initially , getting circleRadio, which is then being used for getting input values\\n    const circleRadio = document.getElementById('rangeselect-circle');\\n    circleRadio.checked = true;\\n\\n    // Activating show info about the application button\\n    const info = document.getElementById('info');\\n    const infoBtn = document.getElementById('show-info');\\n    infoBtn.addEventListener('click', () => {\\n        showOrHideEl(info, 'info--hidden', 'info--visible', 'info--hiding'); // Changes button styling\\n        showOrHideEl(infoBtn, 'header__btn--not-clicked', 'header__btn--clicked', 'header__btn--hiding'); //Shows or hides the info div\\n    })\\n\\n    // Setting up the refresh map button\\n    const refreshBtn = document.getElementById('refresh');\\n    refreshBtn.addEventListener('click', async () => {\\n\\n        const formEls = js_form.elements;\\n        let coords;\\n        \\n        try {\\n\\n            //Getting coords\\n            coords = await getCoords(addressRadio, formEls);\\n\\n        } catch (err) {\\n\\n            const errorDiv = document.getElementById('error'); \\n            errorDiv.textContent = 'Nepodařilo se získat souřadnice. Zkuste to znovu později.'\\n\\n        }\\n        try {\\n\\n            // Rendering map to the screen\\n            createMap(...coords);\\n\\n        } catch {\\n\\n            const errorDiv = document.getElementById('error'); \\n            errorDiv.textContent = 'Nepodařilo se získat mapu. Zkuste to znovu později'\\n        }\\n    })\\n\\n    //Showing the proper input(s) whenever the user chooses if he wants to get the base location by adress or by coords\\n    const locationSelect  = document.getElementById('locationselect-adr').parentElement.parentElement;\\n    const addressInputSet = document.getElementById('address').closest('.form__set');\\n    const coordInputSet = document.getElementById('coord-lat').closest('.form__set');\\n\\n    locationSelect.addEventListener('input', (e) => {\\n        changeInputType(addressInputSet, coordInputSet, 'adr', e);\\n    })\\n\\n    //Showing the proper input(s) whenever the user chooses if he wants to find a trip place in a circle or in an annulus\\n    const rangeSelect = document.getElementById('rangeselect-circle').parentElement.parentElement;\\n    const annulusInputSet = document.getElementById('annulus-perimeter-outer').closest('.form__set');\\n    const circleInputSet = document.getElementById('circle-perimeter').closest('.form__set');\\n\\n    rangeSelect.addEventListener('input', (e) => {\\n        changeInputType(annulusInputSet, circleInputSet, 'annulus', e);\\n    })\\n\\n    //Form submit handling\\n    js_form.addEventListener('submit', async (e) => {\\n\\n        e.preventDefault();\\n\\n        // Finding out, if all needet inputs are valid\\n        const areInputsValid = validateNeeded(addressRadio, circleRadio, formEls);\\n\\n        // Executing logic when all needed inputs are valid\\n        if  (areInputsValid) {\\n\\n            // Getting coords for the selected base\\n            let coords;\\n\\n            try {\\n\\n                //Getting coords\\n                coords = await getCoords(addressRadio, formEls);\\n    \\n            } catch (err) {\\n    \\n                const errorDiv = document.getElementById('error'); \\n                errorDiv.textContent = 'Nepodařilo se získat souřadnice. Zkuste to znovu později.'\\n    \\n            }\\n            \\n            // Getting coords of a random place in the selected range\\n            const [finalLng, finalLat] = calculateCoordTransform(circleRadio, formEls, coords);\\n            \\n            // Constructing URL and redirecting the user to the 'found' page\\n            const url = new URL(`/views/found.html?lng=${finalLng}&lat=${finalLat}`, document.location.href);\\n            document.location.href = url;\\n\\n        } else {\\n\\n            const errorDiv = document.getElementById('error');\\n            if (addressRadio.checked) {\\n                errorDiv.textContent = 'Alespoň jeden input je neplatný. Zkontrolujte, prosím, zda jste zadali adresu a zda jsou všechna čísla zadaná bez jednotek a případné desetinné řády jsou oddělené tečkou.';\\n            } else {\\n                errorDiv.textContent = 'Alespoň jeden input je neplatný. Zkontrolujte, prosím, zda jsou všechna čísla zadaná bez jednotek a případné desetinné řády jsou oddělené tečkou';\\n            }\\n\\n        }\\n    })\\n\\n    // Validating input, whenever the user enters sth to it\\n    for (const input of js_form.elements) {\\n        input.addEventListener('input', () => {\\n            validateInput(input, formEls);\\n        })\\n    }\\n}\\n\\nconst found = document.querySelector('.found');\\n\\n////// IF THE CURRENT PAGE IS FOUND\\n\\nif(found) {\\n\\n    //Getting longitude and latitude from URLSearchParams\\n    const params = new URLSearchParams(window.location.search);\\n    const lat = +params.get('lat');\\n    const lng = +params.get('lng');\\n    \\n    //Finding elements, where the resultcoords will be rendered\\n    const latEl = document.querySelector('.found__coord-lat');\\n    const lngEl = document.querySelector('.found__coord-long');\\n    \\n    // Rendering the result coords\\n    latEl.textContent = lat;\\n    lngEl.textContent = lng;\\n    \\n    // Creating a map with result coords in the center\\n\\n    try {\\n\\n        //Rendering map\\n        createMap(lng, lat);\\n\\n    } catch (err) {\\n\\n        const errorDiv = document.getElementById('error'); \\n        errorDiv.textContent = 'Nepodařilo se získat mapu. Zkuste to znovu později.'\\n\\n    }\\n   \\n    // When user clicks the button, he gets redirected to index.html\\n    const nextTripBtn = document.querySelector('button');\\n    nextTripBtn.addEventListener('click', () => {\\n        const url = new URL(`/views`, document.location.href);\\n        document.location.href = url;\\n    })\\n}\\n\\n    \\n    \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///0\\n\")}]);","extractedComments":[]}